# apply to all dyads
all_dyad_diffs <- lapply(dyad_as_list[1:3], diff_trends)
all_dyad_diffs[[1]]
all_dyad_diffs[[2]]
# apply to all dyads
all_dyad_diffs <- lapply(dyad_as_list, diff_trends)
length(all_dyad_diffs)
all_dyad_diffs[[3]]
all_dyad_diffs <- lapply(dyad_as_list[1:10], diff_trends)
all_dyad_diffs[[10]]
install.packages("multicore")
all_dyad_diffs_mc <- parallel::mclapply(dyad_as_list[1:10], diff_trends)
all_dyad_diffs_mc[[1]]
all_dyad_diffs_mc[[10]]
setequal(all_dyad_diffs, all_dyad_diffs_mc)
all_dyad_diffs_mc <- parallel::mclapply(dyad_as_list[1:1000], diff_trends)
all_dyad_diffs_mc[[600]]
all_dyad_diffs_mc[[900]]
all_dyad_diffs_mc <- parallel::mclapply(dyad_as_list, diff_trends)
parallel::detectCores()
all_dyad_diffs_mc <- parallel::mclapply(dyad_as_list[1:1000], diff_trends,
mc.cores = getOption("mc.cores", 10L))
all_dyad_diffs_mc <- parallel::mclapply(dyad_as_list, diff_trends,
mc.cores = getOption("mc.cores", 10L))
length(all_dyad_diffs_mc)
all_dyad_diffs_mc <- parallel::mclapply(dyad_as_list[1000:10000], diff_trends,
mc.cores = getOption("mc.cores", 10L))
length(all_dyad_diffs_mc)
all_dyad_diffs_mc[[8000]]
length(dyad_as_list)
all_dyad_diffs_mc <- parallel::mclapply(dyad_as_list[50000:100000], diff_trends,
mc.cores = getOption("mc.cores", 10L))
all_dyad_diffs_mc <- parallel::mclapply(dyad_as_list[10000:20000], diff_trends,
mc.cores = getOption("mc.cores", 10L))
length(dyad_as_list)
all_dyad_diffs_mc[[15000]]
all_dyad_diffs_mc <- parallel::mclapply(dyad_as_list[1:10000], diff_trends,
mc.cores = getOption("mc.cores", 10L))
length(all_dyad_diffs_mc)
all_dyad_diffs_mc[[1]]
all_dyad_diffs_mc[[100]]
all_dyad_diffs_mc[[10000]]
all_dyad_diffs_mc <- parallel::mclapply(dyad_as_list[10000:20000], diff_trends,
mc.cores = getOption("mc.cores", 10L))
length(all_dyad_diffs_mc)
all_dyad_diffs_mc[[15000]]
all_dyad_diffs_mc[[14000]]
all_dyad_diffs_mc[[8000]]
all_dyad_diffs_mc[[9000]]
all_dyad_diffs_mc[[8500]]
all_dyad_diffs_mc[[8000]]
all_dyad_diffs_mc[[8001]]
all_dyad_diffs_mc[[8005]]
all_dyad_diffs_mc[[8010]]
all_dyad_diffs_mc[[8020]]
all_dyad_diffs_mc[[8030]]
all_dyad_diffs_mc[[8037]]
all_dyad_diffs_mc[[8100]]
all_dyad_diffs_mc <- parallel::mclapply(dyad_as_list[20000:30000], diff_trends,
mc.cores = getOption("mc.cores", 10L))
all_dyad_diffs_mc[[8100]]
all_dyad_diffs_mc <- parallel::mclapply(dyad_as_list[30000:50000], diff_trends,
mc.cores = getOption("mc.cores", 10L))
length(all_dyad_diffs_mc)
all_dyad_diffs_mc[[1100]]
all_dyad_diffs_mc[[1500]]
all_dyad_diffs_mc <- parallel::mclapply(dyad_as_list[50000:100000], diff_trends,
mc.cores = getOption("mc.cores", 10L))
length(all_dyad_diffs_mc)
all_dyad_diffs_mc[[30000]]
all_dyad_diffs_mc[[50000]]
length(dyad_as_list)
nrow(fitbit_data)
all_dyad_diffs_mc <- parallel::mclapply(dyad_as_list, diff_trends,
mc.cores = getOption("mc.cores", 10L))
getwd()
# save object
saveRDS(all_dyad_diffs_mc, "all_dyad_diffs.rds")
names(fitbit_data)
glimpse(fitbit_data)
diff_trends_sleep <- function(dyad_list){
filtered <- fitbit_data %>%
filter(participid ==  dyad_list[,1] | participid == dyad_list[,2]) %>%
group_by(datadate) %>%
filter(n_distinct(participid) == 2) %>%
summarise(diff = max(sleepmins) - min(sleepmins)) %>%
mutate(node1 =  dyad_list[,1],
node2 = dyad_list[,2]) %>%
ungroup()
return(filtered)
}
# make list
dyad_as_list <- split(dyad_list, seq(nrow(dyad_list)))
# apply using parallelization
dyad_sleep_diffs <- parallel::mclapply(dyad_as_list, diff_trends_sleep,
mc.cores = getOption("mc.cores", 10L))
# empty if dates don't overlap; NA if one had no values for day
# save object
saveRDS(all_dyad_diffs_mc, "dyad_sleep_diffs.rds")
saveRDS(dyad_sleep_diffs, "dyad_sleep_diffs.rds")
install.packages("rlist")
sum(lapply(dyad_steps_diffs, function(x) nrow(x) > 0))
lapply(dyad_steps_diffs, function(x) nrow(x) > 0)
lapply(all_dyad_diffs_mc, function(x) nrow(x) > 0)
sum(lapply(all_dyad_diffs_mc, function(x) nrow(x) > 0))
length(which(lapply(all_dyad_diffs_mc, function(x) nrow(x) > 0))
)
all_dyad_diffs_mc[[1]]
which(lapply(all_dyad_diffs_mc, function(x) nrow(x) > 0))
sum(lapply(all_dyad_diffs_mc, function(x) nrow(x) > 0))
sapply(all_dyad_diffs_mc, function(x) nrow(x) > 0)
class(sapply(all_dyad_diffs_mc, function(x) nrow(x) > 0))
length(which(sapply(all_dyad_diffs_mc, function(x) nrow(x) > 0)))
sum(class(sapply(all_dyad_diffs_mc, function(x) nrow(x) > 0)))
sum(sapply(all_dyad_diffs_mc, function(x) nrow(x) > 0))
# count how many were in study at same time
same_time <- sum(sapply(all_dyad_diffs_mc, function(x) nrow(x) > 0))
same_time
missing_data_days <- sapply(all_dyad_diffs_mc, function(x) sum(is.na(x['steps'])))
# how many dyads have missing data, meaning both in study at same time
# but one person (at least) has NA for day on given measure
missing_data_days <- sapply(all_dyad_diffs_mc, function(x) sum(is.na(x['diff'])))
missing_data_days[[1]]
missing_data_days[[2]]
length(missing_data_days)
dyad_sleep_diffs[[1]]
create_dyad_id <- function(data){
data <- data %>%
unite(dyad_id, node1, node2, remove = FALSE)
return(data)
}
test <- create_dyad_id(dyad_sleep_diffs[[1]])
test
create_dyad_id <- function(data){
data <- data %>%
unite(dyad_id, node1, node2, sep = "", remove = FALSE)
return(data)
}
test <- create_dyad_id(dyad_sleep_diffs[[1]])
test
same_time
dyad_steps_diffs <- all_dyad_diffs_mc
# apply
dyad_steps_diff <- lapply(dyad_steps_diff, create_dyad_id)
dyad_steps_diffs <- all_dyad_diffs_mc
dyad_steps_diff <- lapply(dyad_steps_diff, create_dyad_id)
dyad_steps_diffs <- all_dyad_diffs_mc
dyad_steps_diff <- lapply(dyad_steps_diff, create_dyad_id)
# apply
dyad_steps_diff <- lapply(dyad_steps_diffs, create_dyad_id)
length(dyad_steps_diffs)
dyad_steps_diff[[1]]
dyad_steps_diffs[[1]]
dyad_steps_diffs <- dyad_steps_diff
dyad_steps_diffs[[1]]
rm(dyad_steps_diff)
dyad_sleep_diffs <- lapply(dyad_sleep_diffs, create_dyad_id)
saveRDS(dyad_steps_diffs, "dyad_steps_diffs.rds")
saveRDS(dyad_sleep_diffs, "dyad_sleep_diffs.rds")
missing_steps_days <- sapply(dyad_steps_diffs, function(x) sum(is.na(x['diff'])))
missing_sleep_days <- sapply(dyad_sleep_diffs, function(x) sum(is.na(x['diff'])))
missing_sleep_days
View(fitbit_data)
dyad_list
dyad_steps_diffs[[1]]
missing_sleep_days
missing_steps_prop <- sapply(dyad_steps_diffs, function(x) sum(is.na(x['diff'])) / nrow(x))
missing_sleep_prop <- sapply(dyad_sleep_diffs, function(x) sum(is.na(x['diff'])) / nrow(x))
missing_steps_prop
# visualizing missing proportions
hist(missing_steps_prop)
hist(missing_sleep_prop)
setequal(missing_sleep_prop, missing_steps_prop)
names(missing_steps_days)
test <- as_tibble(missing_steps_prop) %>%
bind_cols(as_tibble(missing_sleep_prop))
head(test)
steps_miss_prop_t <- as_tibble(missing_steps_prop) %>%
rename(value = proportion) %>%
mutate(activity = "steps")
steps_miss_prop_t <- as_tibble(missing_steps_prop) %>%
rename(proportion = value) %>%
mutate(activity = "steps")
dim(steps_miss_prop_t)
head(steps_miss_prop_t)
sleep_miss_prop_t <- as_tibble(missing_steps_prop) %>%
rename(proportion = value) %>%
mutate(activity = "sleep")
head(sleep_miss_prop_t)
missing_prop_combined <- bind_rows(steps_miss_prop_t,
sleep_miss_prop_t)
dim(missing_prop_combined)
# plot histogram faceted
missing_prop_combined %>%
ggplot(aes(x = proportion)) +
geom_histogram() +
facet_grid(as.factor(activity))
# plot histogram faceted
missing_prop_combined %>%
ggplot(aes(x = proportion)) +
geom_histogram() +
facet_wrap(~as.factor(activity))
# plot histogram faceted
missing_prop_combined %>%
ggplot(aes(x = proportion, color = as.factor(activity))) +
geom_histogram() +
facet_wrap(~as.factor(activity))
# plot histogram faceted
missing_prop_combined %>%
ggplot(aes(x = proportion, fill = as.factor(activity))) +
geom_histogram() +
facet_wrap(~as.factor(activity))
# plot histogram faceted
missing_prop_combined %>%
ggplot(aes(x = proportion, fill = as.factor(activity))) +
geom_histogram(alpha = 0.5) +
facet_wrap(~as.factor(activity))
# plot histogram faceted
missing_prop_combined %>%
ggplot(aes(x = proportion, fill = as.factor(activity))) +
geom_histogram(alpha = 0.5) +
geom_vline(aes(xintercept=mean(proportion)),
color="black", linetype="dashed", size=1) +
facet_wrap(~as.factor(activity))
# plot histogram faceted
missing_prop_combined %>%
ggplot(aes(x = proportion, fill = as.factor(activity))) +
geom_histogram(alpha = 0.5) +
geom_vline(xintercept=mean(proportion),
color="black", linetype="dashed", size=1) +
facet_wrap(~as.factor(activity))
facet_wrap(~as.factor(activity))
# plot histogram faceted
missing_prop_combined %>%
ggplot(aes(x = proportion, fill = as.factor(activity))) +
geom_histogram(alpha = 0.5) +
geom_vline(aes(xintercept=mean(proportion)),
color="black", linetype="dashed", size=1) +
facet_wrap(~as.factor(activity))
# plot histogram faceted
missing_prop_combined %>%
ggplot(aes(x = proportion, fill = as.factor(activity))) +
geom_histogram(alpha = 0.5) +
facet_wrap(~as.factor(activity)) +
geom_vline(aes(xintercept=mean(proportion)),
color="black", linetype="dashed", size=1)
# plot histogram faceted
missing_prop_combined %>%
ggplot(aes(x = proportion, fill = as.factor(activity))) +
geom_histogram(alpha = 0.5) +
facet_wrap(~as.factor(activity)) +
geom_vline(data=filter(missing_prop_combined, activity=="steps"),
aes(xintercept=mean(proportion)), colour="black") +
geom_vline(data=filter(missing_prop_combined, activity=="sleep"),
aes(xintercept=mean(proportion)), colour="black")
# plot histogram faceted
missing_prop_combined %>%
ggplot(aes(x = proportion, fill = as.factor(activity))) +
geom_histogram(alpha = 0.5) +
facet_wrap(~as.factor(activity)) +
labs(title = "Histogram of proportion of day data missing for each dyad",
x = "Proportion",
y = "Count",
color = "Type of activity")
# plot histogram faceted
missing_prop_combined %>%
ggplot(aes(x = proportion, fill = as.factor(activity))) +
geom_histogram(alpha = 0.5) +
facet_wrap(~as.factor(activity)) +
labs(title = "Proportion of day data missing for each dyad",
x = "Proportion",
y = "Count",
color = "Type of activity")
# plot histogram faceted
missing_prop_combined %>%
ggplot(aes(x = proportion, fill = as.factor(activity))) +
geom_histogram(alpha = 0.5) +
facet_wrap(~as.factor(activity)) +
labs(title = "Proportion of day data missing for each dyad",
x = "Proportion",
y = "Count",
colour = "Type of activity")
# plot histogram faceted
missing_prop_combined %>%
ggplot(aes(x = proportion, fill = as.factor(activity))) +
geom_histogram(alpha = 0.5) +
facet_wrap(~as.factor(activity)) +
labs(title = "Proportion of day data missing for each dyad",
x = "Proportion",
y = "Count") +
scale_fill_discrete(name = "Type of activity")
mean(steps_miss_prop_t)
mean(steps_miss_prop_t$proportion)
mean(steps_miss_prop_t$proportion, na.rm = TRUE)
mean_smp <- mean(steps_miss_prop_t$proportion, na.rm = TRUE)
mean_sleep <- (steps_miss_prop_t$proportion, na.rm = TRUE)
mean_steps <- mean(steps_miss_prop_t$proportion, na.rm = TRUE)
mean_sleep <- (steps_miss_prop_t$proportion, na.rm = TRUE)
mean_sleep <- (steps_miss_prop_t$proportion, na.rm = TRUE)
mean_sleep <- mean(steps_miss_prop_t$proportion, na.rm = TRUE)
# plot histogram faceted
missing_prop_combined %>%
ggplot(aes(x = proportion, fill = as.factor(activity))) +
geom_histogram(alpha = 0.5) +
facet_wrap(~as.factor(activity)) +
labs(title = "Proportion of day data missing for each dyad",
x = "Proportion",
y = "Count") +
scale_fill_discrete(name = "Type of activity") +
geom_vline(data=filter(missing_prop_combined, as.factor(activity)=="steps"),
aes(xintercept=mean_steps), colour="black") +
geom_vline(data=filter(missing_prop_combined, as.factor(activity)=="sleep"),
aes(xintercept=mean_sleep), colour="black")
# plot histogram faceted
missing_prop_combined %>%
ggplot(aes(x = proportion, fill = as.factor(activity))) +
geom_histogram(alpha = 0.5) +
facet_wrap(~as.factor(activity)) +
labs(title = "Proportion of day data missing for each dyad",
x = "Proportion",
y = "Count") +
scale_fill_discrete(name = "Type of activity") +
geom_vline(data=filter(missing_prop_combined, as.factor(activity)=="steps"),
aes(xintercept=mean_steps), linetype = "dashed", colour="black") +
geom_vline(data=filter(missing_prop_combined, as.factor(activity)=="sleep"),
aes(xintercept=mean_sleep), linetype = "dashed", colour="black")
mean_sleep
mean_steps
setequal(missing_sleep_prop, missing_steps_prop)
setequal(steps_miss_prop_t$proportion, sleep_miss_prop_t$proportion)
median_steps <- median(steps_miss_prop_t$proportion, na.rm = TRUE)
median_sleep <- median(steps_miss_prop_t$proportion, na.rm = TRUE)
missing_prop_combined %>%
ggplot(aes(x = proportion, fill = as.factor(activity))) +
geom_histogram(alpha = 0.5) +
facet_wrap(~as.factor(activity)) +
labs(title = "Proportion of day data missing for each dyad",
x = "Proportion",
y = "Count") +
scale_fill_discrete(name = "Type of activity") +
geom_vline(data=filter(missing_prop_combined, as.factor(activity)=="steps"),
aes(xintercept=mean_steps), linetype = "dashed", colour="black") +
geom_vline(data=filter(missing_prop_combined, as.factor(activity)=="sleep"),
aes(xintercept=mean_sleep), linetype = "dashed", colour="black") +
geom_vline(data=filter(missing_prop_combined, as.factor(activity)=="steps"),
aes(xintercept=median_steps), linetype = "solid", colour="black") +
geom_vline(data=filter(missing_prop_combined, as.factor(activity)=="sleep"),
aes(xintercept=median_sleep), linetype = "solid", colour="black")
get mean for missing proportion types for histograms below
mean_steps <- mean(steps_miss_prop_t$proportion, na.rm = TRUE)
mean_sleep <- mean(sleep_miss_prop_t$proportion, na.rm = TRUE)
# get median for missing proportion types
# get mean for missing proportion types for histograms below
median_steps <- median(steps_miss_prop_t$proportion, na.rm = TRUE)
median_sleep <- median(sleep_miss_prop_t$proportion, na.rm = TRUE)
plot histogram faceted
missing_prop_combined %>%
ggplot(aes(x = proportion, fill = as.factor(activity))) +
geom_histogram(alpha = 0.5) +
facet_wrap(~as.factor(activity)) +
labs(title = "Proportion of day data missing for each dyad",
x = "Proportion",
y = "Count") +
scale_fill_discrete(name = "Type of activity") +
geom_vline(data=filter(missing_prop_combined, as.factor(activity)=="steps"),
aes(xintercept=mean_steps), linetype = "dashed", colour="black") +
geom_vline(data=filter(missing_prop_combined, as.factor(activity)=="sleep"),
aes(xintercept=mean_sleep), linetype = "dashed", colour="black") +
geom_vline(data=filter(missing_prop_combined, as.factor(activity)=="steps"),
aes(xintercept=median_steps), linetype = "solid", colour="black") +
geom_vline(data=filter(missing_prop_combined, as.factor(activity)=="sleep"),
aes(xintercept=median_sleep), linetype = "solid", colour="black")
sleep_miss_prop_t <- as_tibble(missing_sleep_prop) %>%
rename(proportion = value) %>%
mutate(activity = "sleep")
missing_prop_combined <- bind_rows(steps_miss_prop_t,
sleep_miss_prop_t)
# get mean for missing proportion types for histograms below
mean_steps <- mean(steps_miss_prop_t$proportion, na.rm = TRUE)
mean_sleep <- mean(sleep_miss_prop_t$proportion, na.rm = TRUE)
# get median for missing proportion types
# get mean for missing proportion types for histograms below
median_steps <- median(steps_miss_prop_t$proportion, na.rm = TRUE)
median_sleep <- median(sleep_miss_prop_t$proportion, na.rm = TRUE)
# plot histogram faceted
missing_prop_combined %>%
ggplot(aes(x = proportion, fill = as.factor(activity))) +
geom_histogram(alpha = 0.5) +
facet_wrap(~as.factor(activity)) +
labs(title = "Proportion of day data missing for each dyad",
x = "Proportion",
y = "Count") +
scale_fill_discrete(name = "Type of activity") +
geom_vline(data=filter(missing_prop_combined, as.factor(activity)=="steps"),
aes(xintercept=mean_steps), linetype = "dashed", colour="black") +
geom_vline(data=filter(missing_prop_combined, as.factor(activity)=="sleep"),
aes(xintercept=mean_sleep), linetype = "dashed", colour="black") +
geom_vline(data=filter(missing_prop_combined, as.factor(activity)=="steps"),
aes(xintercept=median_steps), linetype = "solid", colour="black") +
geom_vline(data=filter(missing_prop_combined, as.factor(activity)=="sleep"),
aes(xintercept=median_sleep), linetype = "solid", colour="black")
setequal(sleep_miss_prop_t$proportion, steps_miss_prop_t$proportion)
# number of cases at diff missing values thresholds
missing_prop_combined %>%
filter(activity == "steps") %>%
summarise(below_50 = nrow(filter(proportion < 50)))
# number of cases at diff missing values thresholds
missing_prop_combined %>%
filter(activity == "steps") %>%
summarise(below_50 = sum(filter(proportion < 50)))
function(data, focal_var, focal_value, missing_var, missing_value){
below_50 <- data %>%
filter(focal_var == focal_value) %>%
filter(missing_var == missing_value) %>%
nrow()
}
get_missing_cases <- function(data, focal_var, focal_value, missing_var, missing_value){
below_50 <- data %>%
filter(focal_var == focal_value) %>%
filter(missing_var == missing_value) %>%
nrow()
}
get_missing_cases(missing_prop_combined, activity, "steps", proportion, 50)
get_missing_cases <- function(data, focal_var, focal_value, missing_var, missing_value){
below_50 <- data %>%
filter(substitute(focal_var) == focal_value) %>%
filter(missing_var == missing_value) %>%
nrow()
}
get_missing_cases(missing_prop_combined, activity, "steps", proportion, 50)
et_missing_cases <- function(data, focal_var, focal_value, missing_var, missing_value){
below_50 <- data %>%
filter(substitute(focal_var) == focal_value) %>%
filter(substitute(missing_var) == missing_value) %>%
nrow()
return(below_50)
}
get_missing_cases(missing_prop_combined, activity, "steps", proportion, 50)
traceback()
missing_prop_combined %>%
filter(activity == "steps") %>%
summarise(below_50 = sum(filter(missing_prop_combinedproportion < 50)))
get_missing_cases <- function(data, focal_var, focal_value, missing_var, missing_value){
focal_var <- enquo(focal_var)
missing_var <- enquo(missing_var)
below_50 <- data %>%
filter(!! focal_var == focal_value) %>%
filter(!! missing_var == missing_value) %>%
nrow()
return(below_50)
}
get_missing_cases(missing_prop_combined, activity, "steps", proportion, 50)
get_missing_cases <- function(data, focal_var, focal_value, missing_var, missing_value){
focal_var <- enquo(focal_var)
missing_var <- enquo(missing_var)
below_50 <- data %>%
filter(!! focal_var == focal_value) %>%
filter(!! missing_var == missing_value) #%>%
#nrow()
return(below_50)
}
get_missing_cases(missing_prop_combined, activity, "steps", proportion, 50)
get_missing_cases(missing_prop_combined, activity, "steps", proportion, .5)
get_missing_cases <- function(data, focal_var, focal_value, missing_var, missing_value){
focal_var <- enquo(focal_var)
missing_var <- enquo(missing_var)
below_50 <- data %>%
filter(!! focal_var == focal_value) %>%
filter(!! missing_var == missing_value) %>%
nrow()
return(below_50)
}
get_missing_cases(missing_prop_combined, activity, "steps", proportion, .5)
mean_sleep
mean_steps
median_sleep
median_steps
# get these number for various thresholds
thresholds <- tibble::tibble(threshold = c(.25, .36, .41, .50))
thresholds
num_cases <- sapply(thresholds$threshold, function(x){
get_missing_cases(missing_prop_combined, activity, "steps", proportion, x)
})
num_cases
get_missing_cases(missing_prop_combined, activity, "steps", proportion, .25)
get_missing_cases(missing_prop_combined, activity, "steps", proportion, .5)
get_missing_cases <- function(data, focal_var, focal_value, missing_var, missing_value){
focal_var <- enquo(focal_var)
missing_var <- enquo(missing_var)
below_prop <- data %>%
filter(!! focal_var == focal_value) %>%
filter(!! missing_var < missing_value) %>%
nrow()
return(below_prop)
}
num_cases <- sapply(thresholds$threshold, function(x){
get_missing_cases(missing_prop_combined, activity, "steps", proportion, x)
})
num_cases
bind_cols(thresholds, num_cases)
bind_cols(thresholds, as_tibble(num_cases))
bind_cols(thresholds, as_tibble(num_cases)) %>%
rename(n_cases = value)
missing_prop_combined
dyad_sleep_diffs
# get these number for various thresholds
thresholds <- tibble::tibble(threshold = c(.25, .36, .41, .50))
num_cases <- sapply(thresholds$threshold, function(x){
get_missing_cases(missing_prop_combined, activity, "steps", proportion, x)
})
bind_cols(thresholds, as_tibble(num_cases)) %>%
rename(n_cases = value)
