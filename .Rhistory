eval_k_mean5 <- (eval_k[,1:24] + eval_k[,25:48] + eval_k[,49:72] + eval_k[,73:96] + eval_k[,97:120])/5
# plot results
eval_k_mean5 %>%
group_by(index) %>%
mutate(value = (value - min(value)) / (max(value) - min(value))) %>%
ggplot(aes(x = as.numeric(number_k), y = value, group = index, color = index)) +
geom_point() +
geom_line() +
facet_wrap(~goal) +
theme_minimal() +
labs(x = 'Number of Clusters',
y = 'Value',
color = 'Metric')
# make into tibble with min/max variable
eval_k_mean5 <- eval_k_mean5 %>%
as.data.frame() %>%
tibble::rownames_to_column(var = 'index') %>%
# have minize or maximize variable
mutate(goal = case_when(index %in% c('COP', 'DB', "DBstar") ~ 'minimize',
TRUE ~ 'maximize'))
# gather for plotting
eval_k_mean5 <- eval_k_mean5 %>%
gather(key = 'number_k', value = 'value', -c(index, goal))
# plot results
eval_k_mean5 %>%
group_by(index) %>%
mutate(value = (value - min(value)) / (max(value) - min(value))) %>%
ggplot(aes(x = as.numeric(number_k), y = value, group = index, color = index)) +
geom_point() +
geom_line() +
facet_wrap(~goal) +
theme_minimal() +
labs(x = 'Number of Clusters',
y = 'Value',
color = 'Metric')
# remove mis
test <- data_dyad_steps %>%
filter(!is.na(abs_diff),
datadate < '2015-12-19') %>% # start of xmas break
distinct() # keep only distinct observations
# plot
test %>%
count(datadate) %>%
ggplot(aes(x = datadate, y = n)) +
geom_col(fill = 'orange2', alpha = .6) +
theme_minimal() +
labs(x = 'Date',
y = 'Number of dyad observations',
title = 'Distribution of non-missing observations',
subtitle = 'Semester: Fall 2015')
# TODO : fix create_public_data file to replace next three chunks
# import edge list (original)
edge_list <- read.dta13(file = here::here('input', 'arcsfall2015.dta')) %>%
as_tibble() # keeping i and j bc will change with fibit identifiers
edge_list
# import id keys
id_key <- read.dta13(file = here::here('input', 'FitbitEgoId.dta')) %>%
as_tibble() %>%
mutate(fitbitid = case_when(fitbitid == 'NA' ~ NA_character_,
TRUE ~ fitbitid),
fitbitid = stringr::str_trim(fitbitid, 'both'))
id_key
id_lut <- read.csv(here::here('input', 'id_lut.csv'))
id_lut
id_lut <- as_tibble(id_lut)
id_lut
edge_list
# join fitbit ids
edge_list_joined <- edge_list %>%
left_join(id_key, by = c('i' = 'egoid')) %>%
left_join(id_key, by = c('j' = 'egoid'), suffix = c('_1', '_2')) %>%
filter(!is.na(fitbitid_1) & !is.na(fitbitid_2)) %>%
mutate(fitbitid_1 = stringr::str_trim(fitbitid_1, 'both'),
fitbitid_2 = stringr::str_trim(fitbitid_2, 'both')) %>%
unite(arc_1, fitbitid_1, fitbitid_2, sep = "-", remove = FALSE) %>%
unite(arc_2, fitbitid_2, fitbitid_1, sep = "-", remove = FALSE)
edge_list_joined
edge_list
# missing data due to fitibit ids NA
edge_list %>%
left_join(id_key, by = c('i' = 'egoid')) %>%
left_join(id_key, by = c('j' = 'egoid'), suffix = c('_1', '_2')) %>%
summarise(i_missing = sum(is.na(fitbitid_1)),
j_missing = sum(is.na(fitbitid_2)),
iandj_missing = sum(is.na(fitbitid_1) & is.na(fitbitid_2)),
iorj_missing = sum(is.na(fitbitid_1) | is.na(fitbitid_2)))
fitbit_data
id_lut
edge_list_joined
# join new identifiers
id_lut <- read.csv(here::here('input', 'id_lut.csv')) %>%
as_tibble()
id_lut
# join new identifiers
id_lut <- read.csv(here::here('input', 'id_lut.csv')) %>%
as_tibble() %>%
mutate(participid = as.character(participid),
new_id = as.character(new_id))
id_lut
edge_list_joined
# join new identifiers
edge_list_joined %>%
left_join(id_lut, by = c('fitbitid_1' = 'participid')) %>%
left_join(id_lut, by = c('fitbitid_2' = 'participid'))
# join new identifiers
test <- edge_list_joined %>%
left_join(id_lut, by = c('fitbitid_1' = 'participid')) %>%
left_join(id_lut, by = c('fitbitid_2' = 'participid'))
edge_list_joined %>%
left_join(id_lut, by = c('fitbitid_1' = 'participid')) %>%
left_join(id_lut, by = c('fitbitid_2' = 'participid'),  suffix = c('_1', '_2'))
# join new identifiers
test <- edge_list_joined %>%
left_join(id_lut, by = c('fitbitid_1' = 'participid')) %>%
left_join(id_lut, by = c('fitbitid_2' = 'participid'),  suffix = c('_1', '_2'))
n_distinct(test$new_id_1)
n_distinct(test$fitbitid_1)
n_distinct(test$fitbitid_2)
n_distinct(test$new_id_2)
id_lut %>% summarise(n_distinct(participid), n_distinct(new_id))
edge_list %>% summarise(n_distinct(i), n_distinct(j))
test
test %>% filter(!is.na(new_id_1), !is.na(new_id_2))
test %>% filter(!is.na(new_id_1), !is.na(fitbitid_1))
test %>% filter(!is.na(fitbitid_2), !is.na(fitbitid_1))
# summary stats
test %>%
summarise(num_ids_fb1 = n_distinct(fitbitid_1),
num_ids_fb2 = n_distinct(fitbitid_2),
num_ids_new1 = n_distinct(new_id_1),
num_ids_new2 = n_distinct(new_id_2))
fitbit_data
n_distinct(fitbit_data$participid)
data_interpolated
n_distinct(data_fitbit$participid)
df_dyad
df_dyad %>% summarise(n_distinct(vertex_1), n_distinct(vertex_2))
data_fitbit
data_fitbit %>%
summarise(n_distinct(participid))
# summary stats
test %>%
summarise(num_ids_fb1 = n_distinct(fitbitid_1),
num_ids_fb2 = n_distinct(fitbitid_2),
num_ids_new1 = n_distinct(new_id_1),
num_ids_new2 = n_distinct(new_id_2))
edge_list_joined %>%
left_join(id_lut, by = c('fitbitid_1' = 'participid')) %>%
left_join(id_lut, by = c('fitbitid_2' = 'participid'),  suffix = c('_1', '_2')) %>%
select(new_id_1, new_id_2, freq)
edge_list_joined %>%
left_join(id_lut, by = c('fitbitid_1' = 'participid')) %>%
left_join(id_lut, by = c('fitbitid_2' = 'participid'),  suffix = c('_1', '_2')) %>%
select(new_id_1, new_id_2, freq) %>%
filter(!is.na(new_id_1), !is.na(new_id_2))
# join new identifiers
test <- edge_list_joined %>%
left_join(id_lut, by = c('fitbitid_1' = 'participid')) %>%
left_join(id_lut, by = c('fitbitid_2' = 'participid'),  suffix = c('_1', '_2')) %>%
select(new_id_1, new_id_2, freq) %>%
filter(!is.na(new_id_1), !is.na(new_id_2)) %>%
rename(participid_1 = new_id_1,
participid_2 = new_id_2)
test
# save as new arc file
write.csv(test, file = here::here('input', 'arcs_fall_2015.csv'))
# import arc list
edge_list_joined <- read.csv(here::here('input', 'arcs_fall_2015.csv'))
edge_list_joined
# import arc list
edge_list_joined <- read.csv(here::here('input', 'arcs_fall_2015.csv')) %>%
as_tibble()
edge_list_joined
# get arc_list
arc_list <- edge_list_joined %>%
select(participid_1, participid_2)
arc_list
# load packages
library(igraph)
# create igraph object
graph_obj <- graph_from_data_frame(arc_list, directed = TRUE)
# collapse to undirected
graph_obj <- as.undirected(graph_obj,
mode = "collapse") # edge if at least one directed
library(stringr)
# get new edgelist
edges_undir <- as_edgelist(graph_obj) %>%
as_tibble() %>%
mutate_at(vars(V1, V2), str_trim, side = 'both')
edges_undir
# add identifier
edges_undir <- edges_undir %>%
unite(identifier, V1, V2, sep = '-', remove = FALSE)
edges_undir
# test edge variable
data_final %>%
unite(id_dyad_rev, vertex_2, vertex_1, sep = '-', remove = FALSE) %>%
mutate(edge_test = case_when(id_dyad %in% edges_undir$identifier | id_dyad_rev %in% edges_undir$identifier ~ TRUE,
TRUE ~ FALSE)) %>%
summarise(sum(edge), sum(edge_test)) # still 687
# create data to join
data_demog <- data_fitbit %>%
select(participid, gender, race, yourelig) %>%
distinct()
# get dyad_id from data_interpolated
dyads <- data_interpolated %>%
select(id_dyad) %>%
distinct()
# create vertex variables
dyads <- dyads %>%
separate(id_dyad, c('vertex_1', 'vertex_2'), sep = "-", remove = FALSE)
# join demographics
data_final <- dyads %>%
left_join(data_demog, by = c('vertex_1' = 'participid')) %>%
left_join(data_demog, by = c('vertex_2' = 'participid'),
suffix = c('_v1', '_v2')) %>%
ungroup()
data_final
# verify no NAs
data_final %>% summarise_at(vars(genderv1:youreligv2), ~sum(is.na(.)))
# verify no NAs
data_final %>% summarise_at(vars(gender_v1:yourelig_v2), ~sum(is.na(.)))
# generate homophily variables
data_final <- data_final %>%
mutate(gender_same = gender_v1 == gender_v2,
race_same = race_v1 == race_v2,
relig_same = yourelig_v1 == yourelig_v2)
# generate homophily variables
data_final <- data_final %>%
mutate(gender_same = (gender_v1 == gender_v2),
race_same = (race_v1 == race_v2),
relig_same = (yourelig_v1 == yourelig_v2))
# add cluster assignments
data_final <- data_final %>%
mutate(assigned_cluster = as.factor(kshape_24@cluster),
assigned_cluster = relevel(assigned_cluster, ref = '6'))
# function to get counts
get_counts <- function(variable){
fitbit_data %>%
select(participid, {{variable}}) %>%
distinct() %>%
filter(!is.na({{variable}})) %>%
count({{variable}})
}
# number of each gender
get_counts(gender)
# number in each racial category
get_counts(race)
# number in each religious category
get_counts(yourelig)
# predicting same gender
model_gender <- glm(as.numeric(gender_same) ~ assigned_cluster,
family = "binomial",
data = data_final)
l <- cbind(0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0)
aod::wald.test(b = coef(model_gender), Sigma = vcov(model_gender), L = l)
summary(model_gender)
aod::wald.test(b = coef(model_gender), Sigma = vcov(model_gender), L = l)
# model for race
model_race <- glm(as.numeric(race_same) ~ assigned_cluster,
family = "binomial",
data = data_final)
# model for religion
model_relig <- glm(as.numeric(relig_same) ~ assigned_cluster,
family = "binomial",
data = data_final)
l <- cbind(0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0)
aod::wald.test(b = coef(model_relig), Sigma = vcov(model_relig), L = l)
# test edge variable
data_final %>%
unite(id_dyad_rev, vertex_2, vertex_1, sep = '-', remove = FALSE) %>%
mutate(edge_test = case_when(id_dyad %in% edges_undir$identifier | id_dyad_rev %in% edges_undir$identifier ~ TRUE,
TRUE ~ FALSE)) %>%
summarise(sum(edge), sum(edge_test)) # still 687
data_final %>% View()
data_final %>%
unite(id_dyad_rev, vertex_2, vertex_1, sep = '-', remove = FALSE) %>%
mutate(edge_test = case_when(id_dyad %in% edges_undir$identifier | id_dyad_rev %in% edges_undir$identifier ~ TRUE,
TRUE ~ FALSE)) %>% View()
# test edge variable
data_final %>%
unite(id_dyad_rev, vertex_2, vertex_1, sep = '-', remove = FALSE) %>%
mutate(edge_test = case_when(id_dyad %in% edges_undir$identifier | id_dyad_rev %in% edges_undir$identifier ~ TRUE,
TRUE ~ FALSE)) %>%
summarise(#sum(edge),
sum(edge_test)) # still 687
# test on all dyads
data_dyad_steps %>%
distinct(vertex_1, vertex_2) %>%
unite(dyad1, vertex_1, vertex_2, sep = '-', remove = FALSE) %>%
unite(dyad2, vertex_2, vertex_1, sep = '-', remove = FALSE) %>%
mutate(edge_test = case_when(dyad1 %in% edges_undir$identifier | dyad2 %in% edges_undir$identifier ~ TRUE,
TRUE ~ FALSE)) %>%
summarise(sum(edge_test))
# create edge variable
data_final <- data_final %>%
mutate(edge = id_dyad %in% edge_list_key$id_dyad,
edge_arc = case_when(id_dyad %in% edge_list_joined$arc_1 | id_dyad %in% edge_list_joined$arc_2 ~ TRUE,
TRUE ~ FALSE))
data_final %>%
mutate(#edge = id_dyad %in% edge_list_key$id_dyad,
edge_arc = case_when(id_dyad %in% edge_list_joined$arc_1 | id_dyad %in% edge_list_joined$arc_2 ~ TRUE,
TRUE ~ FALSE))
# import edge list (original)
edge_list <- read.dta13(file = here::here('input', 'arcsfall2015.dta')) %>%
as_tibble() # keeping i and j bc will change with fibit identifiers
# import id keys
id_key <- read.dta13(file = here::here('input', 'FitbitEgoId.dta')) %>%
as_tibble() %>%
mutate(fitbitid = case_when(fitbitid == 'NA' ~ NA_character_,
TRUE ~ fitbitid),
fitbitid = stringr::str_trim(fitbitid, 'both'))
# join fitbit ids
edge_list_joined <- edge_list %>%
left_join(id_key, by = c('i' = 'egoid')) %>%
left_join(id_key, by = c('j' = 'egoid'), suffix = c('_1', '_2')) %>%
filter(!is.na(fitbitid_1) & !is.na(fitbitid_2)) %>%
mutate(fitbitid_1 = stringr::str_trim(fitbitid_1, 'both'),
fitbitid_2 = stringr::str_trim(fitbitid_2, 'both')) %>%
unite(arc_1, fitbitid_1, fitbitid_2, sep = "-", remove = FALSE) %>%
unite(arc_2, fitbitid_2, fitbitid_1, sep = "-", remove = FALSE)
edge_list_joined
# join fitbit ids
edge_list_joined <- edge_list %>%
left_join(id_key, by = c('i' = 'egoid')) %>%
left_join(id_key, by = c('j' = 'egoid'), suffix = c('_1', '_2')) %>%
filter(!is.na(fitbitid_1) & !is.na(fitbitid_2)) %>%
mutate(fitbitid_1 = stringr::str_trim(fitbitid_1, 'both'),
fitbitid_2 = stringr::str_trim(fitbitid_2, 'both')) #%>%
# missing data due to fitibit ids NA
edge_list %>%
left_join(id_key, by = c('i' = 'egoid')) %>%
left_join(id_key, by = c('j' = 'egoid'), suffix = c('_1', '_2')) %>%
summarise(i_missing = sum(is.na(fitbitid_1)),
j_missing = sum(is.na(fitbitid_2)),
iandj_missing = sum(is.na(fitbitid_1) & is.na(fitbitid_2)),
iorj_missing = sum(is.na(fitbitid_1) | is.na(fitbitid_2)))
# how many fitbitid missing from beginning
id_key %>%
mutate(fitbitid = case_when(fitbitid == 'NA' ~ NA_character_,
TRUE ~ fitbitid)) %>%
summarise(n_missing = sum(is.na(fitbitid)))
# load new identifiers
id_lut <- read.csv(here::here('input', 'id_lut.csv')) %>%
as_tibble() %>%
mutate(participid = as.character(participid),
new_id = as.character(new_id))
# join new identifiers
test <- edge_list_joined %>%
left_join(id_lut, by = c('fitbitid_1' = 'participid')) %>%
left_join(id_lut, by = c('fitbitid_2' = 'participid'),  suffix = c('_1', '_2')) %>%
unite(arc_1, fitbitid_1, fitbitid_2, sep = "-", remove = FALSE) %>%
unite(arc_2, fitbitid_2, fitbitid_1, sep = "-", remove = FALSE) %>%
select(new_id_1, new_id_2, freq, arc_1, arc_2) %>%
filter(!is.na(new_id_1), !is.na(new_id_2)) %>%
rename(participid_1 = new_id_1,
participid_2 = new_id_2)
test
edge_list_joined
edge_list_joined %>%
left_join(id_lut, by = c('fitbitid_1' = 'participid')) %>%
left_join(id_lut, by = c('fitbitid_2' = 'participid'),  suffix = c('_1', '_2'))
# join new identifiers
test <- edge_list_joined %>%
left_join(id_lut, by = c('fitbitid_1' = 'participid')) %>%
left_join(id_lut, by = c('fitbitid_2' = 'participid'),  suffix = c('_1', '_2')) %>%
unite(arc_1, new_id_1, new_id_2, sep = "-", remove = FALSE) %>%
unite(arc_2, new_id_2, new_id_1, sep = "-", remove = FALSE) %>%
select(new_id_1, new_id_2, freq, arc_1, arc_2) %>%
filter(!is.na(new_id_1), !is.na(new_id_2)) %>%
rename(participid_1 = new_id_1,
participid_2 = new_id_2)
test
# create edge variable
data_final <- data_final %>%
mutate(#edge = id_dyad %in% edge_list_key$id_dyad,
edge_arc = case_when(id_dyad %in% edge_list_joined$arc_1 | id_dyad %in% edge_list_joined$arc_2 ~ TRUE,
TRUE ~ FALSE))
# get dyad_id from data_interpolated
dyads <- data_interpolated %>%
select(id_dyad) %>%
distinct()
dyads
# join demographics
data_final <- dyads %>%
left_join(data_demog, by = c('vertex_1' = 'participid')) %>%
left_join(data_demog, by = c('vertex_2' = 'participid'),
suffix = c('_v1', '_v2')) %>%
ungroup()
# create vertex variables
dyads <- dyads %>%
separate(id_dyad, c('vertex_1', 'vertex_2'), sep = "-", remove = FALSE)
# join demographics
data_final <- dyads %>%
left_join(data_demog, by = c('vertex_1' = 'participid')) %>%
left_join(data_demog, by = c('vertex_2' = 'participid'),
suffix = c('_v1', '_v2')) %>%
ungroup()
# verify no NAs
data_final %>% summarise_at(vars(gender_v1:yourelig_v2), ~sum(is.na(.)))
# generate homophily variables
data_final <- data_final %>%
mutate(gender_same = (gender_v1 == gender_v2),
race_same = (race_v1 == race_v2),
relig_same = (yourelig_v1 == yourelig_v2))
# add cluster assignments
data_final <- data_final %>%
mutate(assigned_cluster = as.factor(kshape_24@cluster),
assigned_cluster = relevel(assigned_cluster, ref = '6'))
data_final
# create edge variable
data_final <- data_final %>%
mutate(#edge = id_dyad %in% edge_list_key$id_dyad,
edge_arc = case_when(id_dyad %in% edge_list_joined$arc_1 | id_dyad %in% edge_list_joined$arc_2 ~ TRUE,
TRUE ~ FALSE))
edge_list_joined
test
# save as new arc file
write.csv(test, file = here::here('input', 'arcs_fall_2015.csv'))
# import arc list
edge_list_joined <- read.csv(here::here('input', 'arcs_fall_2015.csv')) %>%
as_tibble()
# get arc_list
arc_list <- edge_list_joined %>%
select(participid_1, participid_2)
# create igraph object
graph_obj <- graph_from_data_frame(arc_list, directed = TRUE)
# collapse to undirected
graph_obj <- as.undirected(graph_obj,
mode = "collapse") # edge if at least one directed
# get new edgelist
edges_undir <- as_edgelist(graph_obj) %>%
as_tibble() %>%
mutate_at(vars(V1, V2), str_trim, side = 'both')
# add identifier
edges_undir <- edges_undir %>%
unite(identifier, V1, V2, sep = '-', remove = FALSE)
# create edge variable
data_final <- data_final %>%
mutate(#edge = id_dyad %in% edge_list_key$id_dyad,
edge_arc = case_when(id_dyad %in% edge_list_joined$arc_1 | id_dyad %in% edge_list_joined$arc_2 ~ TRUE,
TRUE ~ FALSE))
sum(data_final$edge_arc)
# ==============================================================================
# firth logistic regression
model_edge_firth <- logistf::logistf(edge_arc ~ assigned_cluster, data = data_final)
summary(model_edge_firth)
# get summary
firth_summary <- summary(model_edge_firth)
aod::wald.test(b = coef(model_edge_firth), Sigma = vcov(model_edge_firth), Terms = 2:24)
l <- cbind(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0)
aod::wald.test(b = coef(model_edge_firth), Sigma = vcov(model_edge_firth), L = l)
logistic_test <- glm(edge ~ assigned_cluster, data = data_final, family = 'binomial')
# flic and flac are taken from
# https://onlinelibrary-wiley-com.proxy.library.nd.edu/action/downloadSupplement?doi=10.1002%2Fsim.7273&file=sim7273-sup-0001-Supplementary.pdf
flic <- function(x,y) {
temp.fit1 <- logistf::logistf(y~x)
temp.lp <- temp.fit1$linear.predictors-temp.fit1$coef[1]
temp.fit2 <- glm(y~1,family=binomial(link=logit),offset=temp.lp)
W <- diag(temp.fit2$fitted.values*(1-temp.fit2$fitted.values))
temp.var <- solve(t(cbind(1,x))%*%W%*%cbind(1,x))
beta.0.se <- sqrt(temp.var[1,1])
ic <- temp.fit2$coef
res <- list()
res$coefficients <- c(ic,temp.fit1$coef[-1])
res$fitted <- temp.fit2$fitted
res$linear.predictions <- temp.fit2$linear
res$probabilities <- c(summary(temp.fit2)$coef[,"Pr(>|z|)"],temp.fit1$prob[-1])
res$ci.lower <- c(ic-beta.0.se*1.96,temp.fit1$ci.lower[-1])
res$ci.upper <- c(ic+beta.0.se*1.96,temp.fit1$ci.upper[-1])
return(res)
}
flac <- function(x,y){
temp.fit1 <- logistf::logistf(y~x, pl=FALSE)
temp.pseudo <- c(rep(0,length(y)), rep(1, 2*length(y)))
temp.neww <- c(rep(1,length(y)), temp.fit1$hat/2, temp.fit1$hat/2)
temp.fit2 <- logistf::logistf(c(y,y,1-y)~rbind(x,x,x)+temp.pseudo, weights=temp.neww, family=binomial(logit),
firth=FALSE, pl=TRUE)
res <- list()
res$coefficients <- temp.fit2$coefficients[which("temp.pseudo"!= names(temp.fit2$coefficients) )]
res$fitted <- temp.fit2$predict[1:length(y)]
res$linear.predictors <- temp.fit2$linear.predictors[1:length(y)]
res$probabilities <- temp.fit2$probabilities[which("temp.pseudo"!= names(temp.fit2$prob) )]
res$ci.lower <- temp.fit2$ci.lower[which("temp.pseudo"!= names(temp.fit2$ci.lower)) ]
res$ci.upper <- temp.fit2$ci.upper[which("temp.pseudo"!= names(temp.fit2$ci.upper)) ]
return(res)
}
# run models
model_edge_flic <- flic(x = data_final$assigned_cluster, y = data_final$edge)
model_edge_flac <- flac(x = data_final$assigned_cluster, y = data_final$edge)
# run models
model_edge_flic <- flic(x = data_final$assigned_cluster, y = data_final$edge_arc)
# output tables
output_firth <- tibble(
betas = model_edge_firth$coefficients,
prob = model_edge_firth$prob,
ci_lower = model_edge_firth$ci.lower,
ci_upper = model_edge_firth$ci.upper
)
output_firth
output_flic <- tibble(
beta = model_edge_flic$coefficients,
prob = model_edge_flic$probabilities,
ci_lower = model_edge_flic$ci.lower,
ci_upper = model_edge_flic$ci.upper
)
output_flic
model_edge_flac <- flac(x = data_final$assigned_cluster, y = data_final$edge_arc) # was originally edge
data_interpolated
