as_tibble(beta = test$coefficients, prob = test$probabilities, ci_lower = test$ci.lower, ci_upper = test$ci.upper)
tibble(beta = test$coefficients, prob = test$probabilities, ci_lower = test$ci.lower, ci_upper = test$ci.upper)
tibble(beta = test$coefficients, prob = test$probabilities, ci_lower = test$ci.lower, ci_upper = test$ci.upper) %>% View()
tibble(beta = test$coefficients, prob = test$probabilities, ci_lower = test$ci.lower, ci_upper = test$ci.upper) %>% head(20)
summary(test_model)
test_model$firth
test_model$prob
# output table
output_firth <- tibble(
betas = test_model$coefficients,
prob = test_model$prob,
ci_lower = test_model$ci.lower,
ci_upper = test_model$ci.upper
)
output_flic <- tibble(
beta = test$coefficients,
prob = test$probabilities,
ci_lower = test$ci.lower,
ci_upper = test$ci.upper
)
# save to excel file
write.xlsx(list(output_firth, output_flic),
file = here::here('output', 'tables_edge_reg.xlsx'))
output_firth
test_model$terms
exp(-3.723)
exp(-3.742)
flac <- function(x,y){
temp.fit1 <- logistf(y~x, pl=FALSE)
temp.pseudo <- c(rep(0,length(y)), rep(1, 2*length(y)))
temp.neww <- c(rep(1,length(y)), temp.fit1$hat/2, temp.fit1$hat/2)
temp.fit2 <- logistf (c(y,y,1-y)~rbind(x,x,x)+temp.pseudo, weights=temp.neww, family=binomial(logit),
firth=FALSE, pl=TRUE)
res <- list()
res$coefficients <- temp.fit2$coefficients[which("temp.pseudo"!= names(temp.fit2$coefficients) )]
res$fitted <- temp.fit2$predict[1:length(y)]
res$linear.predictors <- temp.fit2$linear.predictors[1:length(y)]
res$probabilities <- temp.fit2$probabilities[which("temp.pseudo"!= names(temp.fit2$prob) )]
res$ci.lower <- temp.fit2$ci.lower[which("temp.pseudo"!= names(temp.fit2$ci.lower)) ]
res$ci.upper <- temp.fit2$ci.upper[which("temp.pseudo"!= names(temp.fit2$ci.upper)) ]
return(res)
}
test_flac <- flac(x = data_final$assigned_cluster, y = data_final$edge)
flac <- function(x,y){
temp.fit1 <- logistf::logistf(y~x, pl=FALSE)
temp.pseudo <- c(rep(0,length(y)), rep(1, 2*length(y)))
temp.neww <- c(rep(1,length(y)), temp.fit1$hat/2, temp.fit1$hat/2)
temp.fit2 <- logistf (c(y,y,1-y)~rbind(x,x,x)+temp.pseudo, weights=temp.neww, family=binomial(logit),
firth=FALSE, pl=TRUE)
res <- list()
res$coefficients <- temp.fit2$coefficients[which("temp.pseudo"!= names(temp.fit2$coefficients) )]
res$fitted <- temp.fit2$predict[1:length(y)]
res$linear.predictors <- temp.fit2$linear.predictors[1:length(y)]
res$probabilities <- temp.fit2$probabilities[which("temp.pseudo"!= names(temp.fit2$prob) )]
res$ci.lower <- temp.fit2$ci.lower[which("temp.pseudo"!= names(temp.fit2$ci.lower)) ]
res$ci.upper <- temp.fit2$ci.upper[which("temp.pseudo"!= names(temp.fit2$ci.upper)) ]
return(res)
}
test_flac <- flac(x = data_final$assigned_cluster, y = data_final$edge)
flac <- function(x,y){
temp.fit1 <- logistf::logistf(y~x, pl=FALSE)
temp.pseudo <- c(rep(0,length(y)), rep(1, 2*length(y)))
temp.neww <- c(rep(1,length(y)), temp.fit1$hat/2, temp.fit1$hat/2)
temp.fit2 <- logistf::logistf(c(y,y,1-y)~rbind(x,x,x)+temp.pseudo, weights=temp.neww, family=binomial(logit),
firth=FALSE, pl=TRUE)
res <- list()
res$coefficients <- temp.fit2$coefficients[which("temp.pseudo"!= names(temp.fit2$coefficients) )]
res$fitted <- temp.fit2$predict[1:length(y)]
res$linear.predictors <- temp.fit2$linear.predictors[1:length(y)]
res$probabilities <- temp.fit2$probabilities[which("temp.pseudo"!= names(temp.fit2$prob) )]
res$ci.lower <- temp.fit2$ci.lower[which("temp.pseudo"!= names(temp.fit2$ci.lower)) ]
res$ci.upper <- temp.fit2$ci.upper[which("temp.pseudo"!= names(temp.fit2$ci.upper)) ]
return(res)
}
test_flac <- flac(x = data_final$assigned_cluster, y = data_final$edge)
flac <- function(x,y){
temp.fit1 <- logistf::logistf(y~x, pl=FALSE)
temp.pseudo <- c(rep(0,length(y)), rep(1, 2*length(y)))
temp.neww <- c(rep(1,length(y)), temp.fit1$hat/2, temp.fit1$hat/2)
temp.fit2 <- logistf::logistf(c(y,y,1-y)~rbind(x,x,x)+temp.pseudo, weights=temp.neww, family=binomial(logit),
firth=FALSE, pl=TRUE)
res <- list()
res$coefficients <- temp.fit2$coefficients[which("temp.pseudo"!= names(temp.fit2$coefficients) )]
res$fitted <- temp.fit2$predict[1:length(y)]
res$linear.predictors <- temp.fit2$linear.predictors[1:length(y)]
res$probabilities <- temp.fit2$probabilities[which("temp.pseudo"!= names(temp.fit2$prob) )]
res$ci.lower <- temp.fit2$ci.lower[which("temp.pseudo"!= names(temp.fit2$ci.lower)) ]
res$ci.upper <- temp.fit2$ci.upper[which("temp.pseudo"!= names(temp.fit2$ci.upper)) ]
return(res)
}
test_flac <- flac(x = data_final$assigned_cluster, y = data_final$edge)
model_test <- glm(edge ~ assigned_cluster, data = data_final, family = 'binomial')
summary(model_test)
test$linear.predictions
test_model$loglik
extractAIC(test_model)
summary(test_model)
logistic_firth <- logistf::logistf(edge ~ assigned_cluster, data = data_final)
summary(logistic_firth)
firth_summary <- summary(logistic_firth)
firth_summary
extractAIC(firth_summary)
logistic_test <- glm(edge ~ assigned_cluster, data = data_final, family = 'binomial')
extractAIC(logistic_test)
screenreg(logistic_firth)
extractAIC(model_race)
extractAIC(test)
model_edge_flic <- flic(x = data_final$assigned_cluster, y = data_final$edge)
model_edge_firth <- logistf::logistf(edge ~ assigned_cluster, data = data_final)
firth_summary <- summary(model_edge_firth)
firth_summary <- summary(model_edge_firth)
firth_summary
firth_summary$coefficients
firth_summary$alpha
firth_summary$terms
firth_summary$var
firth_summary$method.ci
output_firth <- tibble(
betas = model_edge_firth$coefficients,
prob = model_edge_firth$prob,
ci_lower = model_edge_firth$ci.lower,
ci_upper = model_edge_firth$ci.upper
)
output_flic <- tibble(
beta = model_edge_flic$coefficients,
prob = model_edge_fliic$probabilities,
ci_lower = model_edge_flic$ci.lower,
ci_upper = model_edge_flic$ci.upper
)
output_flic <- tibble(
beta = model_edge_flic$coefficients,
prob = model_edge_flic$probabilities,
ci_lower = model_edge_flic$ci.lower,
ci_upper = model_edge_flic$ci.upper
)
# save to excel file
write.xlsx(list(output_firth, output_flic),
sheetName = c('firth', 'flic'),
file = here::here('output', 'tables_edge_reg.xlsx'))
extractAIC(model_edge_firth)
extractAIC(model_gender)
extractAIC(model_race)
data_final %>% group_by(edge) %>% count(edge)
data_final
data_fitbit
data_fitbit %>% select(participid, race, gender, yourelig)
data_fitbit %>% select(participid, race, gender, yourelig) %>% filter(participid %in% data_final$vertex_1 | participid %in% data_final$vertex_2)
data_fitbit %>% select(participid, race, gender, yourelig) %>% distinct() %>% filter(participid %in% data_final$vertex_1 | participid %in% data_final$vertex_2)
data_fitbit %>% select(participid, race, gender, yourelig) %>% distinct() %>% filter(participid %in% data_final$vertex_1 | participid %in% data_final$vertex_2) %>% count(race, yourelig)
data_fitbit %>% select(participid, race, gender, yourelig) %>% distinct() %>% filter(participid %in% data_final$vertex_1 | participid %in% data_final$vertex_2) %>% group_by(race, yourelig) %>% summarise(n())
data_fitbit %>% select(participid, race, gender, yourelig) %>% distinct() %>% filter(participid %in% data_final$vertex_1 | participid %in% data_final$vertex_2) %>% group_by(race, yourelig) %>% summarise(n()) %>% spread(yourelig, 'n()')
data_final
data_final %>% summarise(num_same_gender = sum(gender_same),)
data_final %>% summarise(num_same_gender = sum(gender_same),num_same_race = sum(race_same), num_same_relig = sum(relig_same))
data_final %>% summarise(num_same_gender = sum(gender_same),num_same_race = sum(race_same), num_same_relig = sum(relig_same), data_final - num_same_gender, data_final - num_same_race, data_final - num_same_relig)
data_final - 16831
data_final %>% summarise(num_same_gender = sum(gender_same),num_same_race = sum(race_same), num_same_relig = sum(relig_same), nrow(data_final) - num_same_gender, nrow(data_final) - num_same_race, nrow(data_final) - num_same_relig)
data_final %>% summarise(num_same_gender = sum(gender_same),num_same_race = sum(race_same), num_same_relig = sum(relig_same), nrow(data_final) - num_same_gender, nrow(data_final) - num_same_race, nrow(data_final) - num_same_relig)
summary(model_gender)
wald.test(b = coef(model_gender), Sigma = vcov(model_gender), Terms = 2:23)
waod::ald.test(b = coef(model_gender), Sigma = vcov(model_gender), Terms = 2:23)
aod::wald.test(b = coef(model_gender), Sigma = vcov(model_gender), Terms = 2:23)
install.packages('aod')
aod::wald.test(b = coef(model_gender), Sigma = vcov(model_gender), Terms = 2:23)
exp(cbind(OR = coef(model_gender), confint(model_gender)))
aod::wald.test(b = coef(model_race), Sigma = vcov(model_race), Terms = 2:23)
exp(cbind(OR = coef(model_race), confint(model_race)))
exp(cbind(OR = coef(model_religion), confint(model_religion)))
exp(cbind(OR = coef(model_relig), confint(model_relig)))
aod::wald.test(b = coef(model_relig), Sigma = vcov(model_relig), Terms = 2:23)
exp(cbind(OR = coef(model_edge_firth), confint(model_edge_firth)))
exp(-.55)
# import edge list (original)
edge_list <- read.dta13(file = here::here('input', 'arcsfall2015.dta')) %>%
as_tibble() # keeping i and j bc will change with fibit identifiers
edge_list
id_key
# import id keys
id_key <- read.dta13(file = here::here('input', 'FitbitEgoId.dta')) %>%
as_tibble()
id_key
edge_list
# join fitbit ids
edge_list <- edge_list %>%
left_join(id_key, by = c('i' = 'egoid')) %>%
left_join(id_key, by = c('j' = 'egoid'), suffix = c('_1', '_2'))
edge_list
edge_list %>% filter(!is.na(fitbitid_1) & !is.na(fitbitid_2))
read.dta13(file = here::here('input', 'FitbitEgoId.dta')) %>%
as_tibble() %>%
mutate_at(vars(fitbitid_1, fitbitid_2),
~case_when(. == 'NA' ~ NA_character_,
TRUE ~ .))
id_key
id_key %>% summarise(sum(is.na(egoid), sum(is.na(fitbitid))))
id_key %>% summarise(sum(is.na(egoid)), sum(is.na(fitbitid)))
# import edge list (original)
edge_list <- read.dta13(file = here::here('input', 'arcsfall2015.dta')) %>%
as_tibble() # keeping i and j bc will change with fibit identifiers
edge_list
# join fitbit ids
edge_list_joiend <- edge_list %>%
left_join(id_key, by = c('i' = 'egoid')) %>%
left_join(id_key, by = c('j' = 'egoid'), suffix = c('_1', '_2'))
edge_list_joiend
# import id keys
id_key <- read.dta13(file = here::here('input', 'FitbitEgoId.dta')) %>%
as_tibble()
edge_list %>% filter(!i %in% id_key$egoid)
id_key
id_key %>% filter(egoid == 10153)
id_key %>% summarise(sum(is.na(fitbitid)))
# import id keys
id_key <- read.dta13(file = here::here('input', 'FitbitEgoId.dta')) %>%
as_tibble() %>%
mutate(fitbitid = case_when(fitbitid == 'NA' ~ NA_character_,
TRUE ~ fitbitid))
id_key %>% summarise(sum(is.na(fitbitid)))
# join fitbit ids
edge_list_joiend <- edge_list %>%
left_join(id_key, by = c('i' = 'egoid')) %>%
left_join(id_key, by = c('j' = 'egoid'), suffix = c('_1', '_2'))
edge_list_joiend
edge_list_joiend %>% filter(!is.na(fitbitid_1) & !is.na(fitbitid_2))
fitbit_data %>% filter(!participid %in% c(edge_list_joiend$i, edge_list_joiend$j))
fitbit_data %>% filter(!participid %in% c(edge_list_joiend$i, edge_list_joiend$j)) %>% distinct(participid)
edge_list %>% filter(i == 10153 | j == 10153)
edge_list %>% filter(i == 10153 | j == 10153) %>% distinct(j)
data_final
edge_list
exp(-3.72)
exp(3.72)
data_final
edge_list
edge_list_joiend
# join fitbit ids
edge_list_joined <- edge_list %>%
left_join(id_key, by = c('i' = 'egoid')) %>%
left_join(id_key, by = c('j' = 'egoid'), suffix = c('_1', '_2')) %>%
filter(!is.na(fitbitid_1) & !is.na(fitbitid_2))
edge_list_joiend %>% rm()
edge_list_joined
data_final
# create edge variable
data_final <- data_final %>%
mutate(edge = id_dyad %in% edge_list_key$id_dyad,
edge_arc = case_when(vertex_1 == edge_list_joined$fitbitid_1 & vertex_2 == edge_list_joined$fitbitid_2 | vertex_1 == edge_list_joined$fitbitid_2 & vertex_2 == edge_list_joined$fitbitid_1 ~ TRUE,
TRUE ~ FALSE))
edge_list_joined
edge_list %>%
left_join(id_key, by = c('i' = 'egoid')) %>%
left_join(id_key, by = c('j' = 'egoid'), suffix = c('_1', '_2')) %>%
filter(!is.na(fitbitid_1) & !is.na(fitbitid_2)) %>%
unite(arc_1, fitbitid_1, fitbitid_2, sep = "-")
edge_list %>%
left_join(id_key, by = c('i' = 'egoid')) %>%
left_join(id_key, by = c('j' = 'egoid'), suffix = c('_1', '_2')) %>%
filter(!is.na(fitbitid_1) & !is.na(fitbitid_2)) %>%
unite(arc_1, fitbitid_1, fitbitid_2, sep = "-", remove = FALSE)
# join fitbit ids
edge_list_joined <- edge_list %>%
left_join(id_key, by = c('i' = 'egoid')) %>%
left_join(id_key, by = c('j' = 'egoid'), suffix = c('_1', '_2')) %>%
filter(!is.na(fitbitid_1) & !is.na(fitbitid_2)) %>%
unite(arc_1, fitbitid_1, fitbitid_2, sep = "-", remove = FALSE) %>%
unite(arc_2, fitbitid_2, fitbitid_1, sep = "-", remove = FALSE)
edge_list_joined
data_final
# create edge variable
data_final <- data_final %>%
mutate(edge = id_dyad %in% edge_list_key$id_dyad,
edge_arc = case_when(id_dyad %in% edge_list_joined$arc_1 | id_dyad %in% edge_list_joined$arc_2 ~ TRUE,
TRUE ~ FALSE))
data_final
data_final %>% summarise(sum(edge), sum(edge_arc))
edge_list_joined
edge_list_joined %>% distinct(arc_1)
data_fitbit
data_fitbit %>% select(net_id_email, participid)
fitbit_data %>% select(idstudy, participid, net_id_email)
data_fitbit %>% summarise(sum(is.na(net_id_email)))
data_final %>% filter(!id_dyad %in% edge_list_joined$arc_1 & !id_dyad %in% edge_list_joined$arc_2)
data_final %>% filter(!id_dyad %in% edge_list_joined$arc_1 & !id_dyad %in% edge_list_joined$arc_2) %>% pull(vertex_1, vertex_2)
not_in_final <- data_final %>% filter(!id_dyad %in% edge_list_joined$arc_1 & !id_dyad %in% edge_list_joined$arc_2) %>% select(vertex_1, vertex_2)
not_in_final
vec_not_in_final <- c(not_in_final$vertex_1, not_in_final$vertex_2) %>%
unique()
vec_not_in_final
vec_not_in_final <- tibble(
not_found = not_in_final$vertex_1, not_in_final$vertex_2
)
vec_not_in_final <- tibble(
not_found = not_in_final$vertex_1, not_in_final$vertex_2
) %>%
distinct()
not_in_final
vec_not_in_final <- tibble(
not_found = c(not_in_final$vertex_1, not_in_final$vertex_2)
) %>%
distinct()
vec_not_in_final
vec_not_in_final <- tibble(
not_found = c(not_in_final$vertex_1, not_in_final$vertex_2)
) %>%
distinct()
vec_not_in_final
edge_list
edge_list_joiend
vec_not_in_final %>%
mutate(in_edgelist = case_when(not_found %in% edge_list_joined$fitbitid_1 & not_found %in% edge_list_joined$fitbitid_2 ~ TRUE,
TRUE ~ FALSE))
vec_not_in_final %>%
mutate(in_edgelist = case_when(not_found %in% edge_list_joined$fitbitid_1 | not_found %in% edge_list_joined$fitbitid_2 ~ TRUE,
TRUE ~ FALSE))
vec_not_in_final %>%
mutate(in_edgelist = case_when(not_found %in% edge_list_joined$fitbitid_1 | not_found %in% edge_list_joined$fitbitid_2 ~ TRUE,
TRUE ~ FALSE)) %>% summarise(sum(in_edgelist))
View(edge_list_joined)
View(data_final)
edge_list
edge_list_joined
id_key
# import id keys
id_key <- read.dta13(file = here::here('input', 'FitbitEgoId.dta')) %>%
as_tibble() %>%
mutate(fitbitid = case_when(fitbitid == 'NA' ~ NA_character_,
TRUE ~ fitbitid),
fitbitid = stringr::str_trim(fitbitid, 'both'))
# join fitbit ids
edge_list_joined <- edge_list %>%
left_join(id_key, by = c('i' = 'egoid')) %>%
left_join(id_key, by = c('j' = 'egoid'), suffix = c('_1', '_2')) %>%
filter(!is.na(fitbitid_1) & !is.na(fitbitid_2)) %>%
mutate(fitbitid_1 = stringr::str_trim(fitbitid_1, 'both'),
fitbitid_2 = stringr::str_trim(fitbitid_2, 'both')) %>%
unite(arc_1, fitbitid_1, fitbitid_2, sep = "-", remove = FALSE) %>%
unite(arc_2, fitbitid_2, fitbitid_1, sep = "-", remove = FALSE)
edge_list_joined
# create edge variable
data_final <- data_final %>%
mutate(edge = id_dyad %in% edge_list_key$id_dyad,
edge_arc = case_when(id_dyad %in% edge_list_joined$arc_1 | id_dyad %in% edge_list_joined$arc_2 ~ TRUE,
TRUE ~ FALSE))
data_final %>% summarise(sum(edge_arc))
id_key
edge_list_joined
edge_list_joined %>% select(fitbitid_1, fitbitid_2)
# get arc_list
arc_list <- edge_list_joined %>%
select(fitbitid_1, fitbitid_2)
arc_list
library(igraph)
# create igraph object
graph_obj <- graph_from_data_frame(arc_list, directed = TRUE)
graph_obj
# collapse to undirected
graph_obj <- as.undirected(graph_obj,
mode = "collapse") # edge if at least one directed
graph_obj
as_edgelist(graph_obj)
as_edgelist(graph_obj) %>% as_tibble()
# get new edgelist
as_edgelist(graph_obj) %>%
as_tibble(.name_repair = c('vertex_1', 'vertex_2'))
# get new edgelist
as_edgelist(graph_obj) %>%
as_tibble(.name_repair = c('vertex_1', 'vertex_2'))
# get new edgelist
edges_undir <- as_edgelist(graph_obj) %>%
as_tibble()
edges_undir
library(stringr)
# get new edgelist
edges_undir <- as_edgelist(graph_obj) %>%
as_tibble() %>%
mutate_at(vars(V1, V2), str_trim, side = 'both')
edges_undir
edges_undir %>% distinct()
# add identifier
edges_undir <- edges_undir %>%
unite(identifier, V1, V2, remove = FALSE)
edges_undir
edge_list
data_final
edges_undir
# add identifier
edges_undir <- edges_undir %>%
unite(identifier, V1, V2, sep = '-', remove = FALSE)
edges_undir
data_dyad_steps
data_final
edges_undir
# test edge variable
data_final %>%
unite(id_dyad_rev, vertex_2, vertex_1, sep = '-', remove = FALSE) %>%
mutate(edge_test = case_when(id_dyad %in% edges_undir$identifier | id_dyad_rev %in% edges_undir$identifier ~ TRUE,
TRUE ~ FALSE))
# test edge variable
data_final %>%
unite(id_dyad_rev, vertex_2, vertex_1, sep = '-', remove = FALSE) %>%
mutate(edge_test = case_when(id_dyad %in% edges_undir$identifier | id_dyad_rev %in% edges_undir$identifier ~ TRUE,
TRUE ~ FALSE)) %>%
summarise(sum(edge), sum(edge_test))
data_dyad_steps
data_dyad_steps %>% distinct(vertex_1, vertex_2)
# test on all dyads
data_dyad_steps %>%
distinct(vertex_1, vertex_2) %>%
unite(dyad1, vertex_1, vertex_2, sep = '-', remove = FALSE) %>%
unite(dyad2, vertex_2, vertex_1, sep = '-', remove = FALSE)
# test on all dyads
data_dyad_steps %>%
distinct(vertex_1, vertex_2) %>%
unite(dyad1, vertex_1, vertex_2, sep = '-', remove = FALSE) %>%
unite(dyad2, vertex_2, vertex_1, sep = '-', remove = FALSE) %>%
mutate(edge_test = case_when(dyad1 %in% edges_undir$identifier | dyad2 %in% edges_undir$identifier ~ TRUE,
TRUE ~ FALSE)) %>%
summarise(sum(edge_test))
edges_undir
edge_list_joined
# missing data due to fitibit ids NA
edge_list %>%
left_join(id_key, by = c('i' = 'egoid')) %>%
left_join(id_key, by = c('j' = 'egoid'), suffix = c('_1', '_2')) %>%
summarise(i_missing = sum(is.na(fitbitid_1)),
j_missing = sum(is.na(fitbitid_2)),
ij_missing = sum(is.na(fitbitid_1) & is.na(fitbitid_2)))
# missing data due to fitibit ids NA
edge_list %>%
left_join(id_key, by = c('i' = 'egoid')) %>%
left_join(id_key, by = c('j' = 'egoid'), suffix = c('_1', '_2')) %>%
summarise(i_missing = sum(is.na(fitbitid_1)),
j_missing = sum(is.na(fitbitid_2)),
iandj_missing = sum(is.na(fitbitid_1) & is.na(fitbitid_2)),
iorj_missing = sum(is.na(fitbitid_1) | is.na(fitbitid_2)))
id_key
# how many fitbitid missing from beginning
id_key %>%
mutate(fitbitid = case_when(fitbitid == 'NA' ~ NA_character_,
TRUE ~ fitbitid))
# how many fitbitid missing from beginning
id_key %>%
mutate(fitbitid = case_when(fitbitid == 'NA' ~ NA_character_,
TRUE ~ fitbitid)) %>%
summarise(n_missing = sum(is.na(fitbitid)))
data_final %>%
mutate(edge = id_dyad %in% edge_list_key$id_dyad,
edge_arc = case_when(id_dyad %in% edge_list_joined$arc_1 | id_dyad %in% edge_list_joined$arc_2 ~ TRUE,
TRUE ~ FALSE)) %>% summarise(sum(is.na(edge_arc)))
data_final %>%
mutate(edge = id_dyad %in% edge_list_key$id_dyad,
edge_arc = case_when(id_dyad %in% edge_list_joined$arc_1 | id_dyad %in% edge_list_joined$arc_2 ~ TRUE,
TRUE ~ FALSE)) %>% summarise(sum(edge_arc)
)
data_final
data_final$edge_arc %>% sum()
model_edge_firth <- logistf::logistf(edge_arc ~ assigned_cluster, data = data_final)
extractAIC(model_edge_firth)
summary(model_edge_firth)
l <- cbind(0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0)
wald.test(b = coef(model_relig), Sigma = vcov(model_relig), L = l)
aod::wald.test(b = coef(model_relig), Sigma = vcov(model_relig), L = l)
l <- cbind(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0)
aod::wald.test(b = coef(model_relig), Sigma = vcov(model_relig), L = l)
l <- cbind(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0)
aod::wald.test(b = coef(model_relig), Sigma = vcov(model_relig), L = l)
l <- cbind(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, -1)
aod::wald.test(b = coef(model_relig), Sigma = vcov(model_relig), L = l)
l <- cbind(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1, 0, -1, 0, 0)
aod::wald.test(b = coef(model_relig), Sigma = vcov(model_relig), L = l)
data_final
c(data_final$vertex_1, data_final$vertex_2) %>% unique()
data_final
data_final %>% select(id_dyad) %>% distinct()
model_edge_firth$n
summary(model_race)
screenreg(model_race)
exp(coefficients(model_race))
exp(coefficients(model_edge_firth)
)
exp(-.54)
summary(model_edge_firth)
l <- cbind(0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0)
aod::wald.test(b = coef(model_edge_firth), Sigma = vcov(model_edge_firth), L = l)
l <- cbind(0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1)
aod::wald.test(b = coef(model_edge_firth), Sigma = vcov(model_edge_firth), L = l)
l <- cbind(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1)
aod::wald.test(b = coef(model_edge_firth), Sigma = vcov(model_edge_firth), L = l)
l <- cbind(0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0)
aod::wald.test(b = coef(model_edge_firth), Sigma = vcov(model_edge_firth), L = l)
l <- cbind(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0)
aod::wald.test(b = coef(model_edge_firth), Sigma = vcov(model_edge_firth), L = l)
l <- cbind(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0)
aod::wald.test(b = coef(model_edge_firth), Sigma = vcov(model_edge_firth), L = l)
aod::wald.test(b = coef(model_edge_firth), Sigma = vcov(model_edge_firth), Terms = 2:24)
l <- cbind(0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0)
aod::wald.test(b = coef(model_gender), Sigma = vcov(model_gender), L = l)
exp(coefficients(model_gender))
exp(coefficients(model_race))
exp(coefficients(model_relig))
